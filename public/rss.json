{
  "version": "https://jsonfeed.org/version/1",
  "title": "Blog posts | RSS Feed",
  "home_page_url": "http://localhost:3500",
  "feed_url": "http://localhost:3500/rss.json",
  "description": "Welcome to my blog posts!",
  "icon": "https://avatars.githubusercontent.com/u/26381717",
  "items": [
    {
      "id": "http://localhost:3500/blog/2023/overcoming-toxic-productivity",
      "content_html": "\nToxic productivity is a dangerous state of being that can have serious consequences for both individuals and their loved ones. It's a trap that's easy to fall into, especially in today's fast-paced world where it often feels like there's never enough time to get everything done. But the harsh reality is that trying to be overly productive can have disastrous results.\n\nHave you ever felt like you're working harder and longer than ever before, yet still struggling to keep up? Do you find yourself neglecting your own well-being and the well-being of those around you in the pursuit of productivity? If so, you may be dealing with toxic productivity.\n\nWhat is toxic productivity? Simply put, it's when an individual becomes so focused on being productive that they begin to sacrifice their own health and happiness in the process. It's an unhealthy obsession with getting things done, no matter the cost.\n\nThere are several signs that you may be experiencing toxic productivity. These include:\n\n1. Working long hours without taking breaks: It's important to have a healthy work schedule that includes regular breaks to rest and recharge. If you're working long hours without taking breaks, it could be a sign that you're trying to be too productive at the expense of your own well-being.\n2. Neglecting self-care: Toxic productivity often leads individuals to neglect their own self-care, such as skipping meals, not getting enough sleep, and not engaging in activities that bring them joy.\n3. Putting work above all else: If you're constantly prioritizing work over your personal relationships and hobbies, it could be a sign that you're struggling with toxic productivity.\n4. Exhibiting perfectionist tendencies: An excessive need for perfection can lead to excessive amounts of time spent on tasks and an inability to let go of mistakes. This can be a sign of toxic productivity.\n   So, what can you do to remedy toxic productivity and get back on track? It's important to prioritize self-care and work-life balance. This can include setting boundaries for work, taking breaks, and engaging in activities that bring joy and relaxation. It may also be helpful to seek the support of a therapist or coach to work through any underlying issues that may be contributing to toxic productivity.\n\nRemember, productivity is important, but it's not worth sacrificing your own health and happiness. Take the time to care for yourself and those around you, and you'll be on your way to a healthier, more balanced life.\n",
      "url": "http://localhost:3500/blog/2023/overcoming-toxic-productivity",
      "title": "Overcoming Toxic Productivity: The Importance of Self-Care and Work-Life Balance",
      "summary": "Toxic productivity is a dangerous state of being that can have severe consequences for individuals and their loved ones.",
      "image": "http://localhost:3500/2023/productivity.png",
      "date_modified": "2023-01-09T19:11:44.000Z"
    },
    {
      "id": "http://localhost:3500/blog/2022/distributed-systems-key-concepts-and-challenges",
      "content_html": "\nThese systems have become increasingly important in recent years, as organizations seek to improve the reliability and performance of their systems by leveraging the power of multiple computers. However, building and maintaining distributed systems can also present several challenges. In this article, we will discuss some of the key concepts and challenges involved in building distributed systems.\n\n## Key Concepts in Distributed Systems\n\nSeveral key concepts are important to understand when building distributed systems. These include:\n\n- Transparency: A distributed system should operate transparently, meaning that users should not be aware of the fact that the system is distributed across multiple computers.\n- Heterogeneity: Distributed systems often involve a mix of different hardware and software platforms, which can make it challenging to ensure compatibility and interoperability.\n- Scalability: Distributed systems should be able to handle an increasing workload without experiencing a decline in performance.\n\n## Benefits and Challenges of Distributed Systems\n\nDistributed systems can provide several benefits, including:\n\n- Improved reliability: A distributed system can be more resilient to failures by distributing a workload across multiple computers.\n- Improved performance: Distributed systems can often process a workload more quickly than a single computer, as the workload can be divided and processed in parallel. However, distributed systems also present several challenges, including:\n- Communication and coordination: Ensuring that the different components of a distributed system can communicate and coordinate effectively can be a challenge.\n- Handling failures and security threats: Distributed systems must be able to handle failures and security threats, such as network outages or malicious attacks.\n\n## Types of Distributed Systems\n\nThere are several different types of distributed systems, including:\n\n- Client-server systems: In a client-server system, clients send requests to servers, which process the requests and return the results.\n- Peer-to-peer systems: In a peer-to-peer system, all computers are equal and can act as both clients and servers.\n- Hybrid systems: Hybrid systems combine elements of both client-server and peer-to-peer systems.\n\n## Architectural Models for Distributed Systems\n\nSeveral different architectural models can be used to design distributed systems, including:\n\n- Layered model: In a layered model, the system is divided into layers, with each layer responsible for a specific function.\n- Event-based model: In an event-based model, the system is divided into components that communicate with each other through events.\n- Object-based model: In an object-based model, the system is divided into objects that can interact with each other through methods.\n\n## Designing for Transparency and Performance\n\nWhen designing distributed systems, it is important to strike the right balance between transparency and performance. On the one hand, transparency is important as it allows users to interact with the system seamlessly. On the other hand, too much transparency can impact performance as it requires additional communication and coordination among the different components of the system. As such, it is important to carefully consider the trade-offs between transparency and performance when designing a distributed system.\n\n## Testing and Debugging Distributed Systems\n\nTesting and debugging distributed systems can be a complex and time-consuming process, as it involves ensuring that the different components of the system are working together correctly. It is important to thoroughly test and debug a distributed system to ensure that it is functioning as intended and to identify and fix any issues.\n\n## Ongoing Maintenance of Distributed Systems\n\nDistributed systems require ongoing maintenance to ensure that they continue to operate effectively and efficiently. This may involve monitoring the system to identify and fix any issues, updating the design to incorporate new features or address security vulnerabilities, and performing regular backups to protect against data loss. It is essential to have a well-defined maintenance plan in place to ensure that the system remains reliable and performs at its best.\n",
      "url": "http://localhost:3500/blog/2022/distributed-systems-key-concepts-and-challenges",
      "title": "Distributed Systems: Key Concepts and Challenges",
      "summary": "Distributed systems are computer systems that allow multiple computers to work together as a single entity.",
      "image": "http://localhost:3500/2022/distributed-systems.jpg",
      "date_modified": "2022-12-19T10:12:30.000Z"
    },
    {
      "id": "http://localhost:3500/blog/2022/write-it-down",
      "content_html": "\nMy crappy superpower is solving difficult problems as I'm falling asleep. Doesn't sound too bad, right? Here's the catch: I always convince myself I don't need to write the solution down.\n\nIt's 1:18 AM. I just figured it out. The answer is so simple, I can't believe it took me this long. Do I blind myself opening my phone to write it down? No, I can finally sleep now! There's no way I'll forget.\n\nIt's 8:32 AM. I can't believe I've done this again.\n\n---\n\nI have a new policy: **write it down.** Every single time. No matter if the idea comes to me in the shower, the middle of a dream, or in a conversation.\n\nMost of my ideas are bad. But this way I'll never miss an opportunity.\n",
      "url": "http://localhost:3500/blog/2022/write-it-down",
      "title": "Write it down",
      "summary": "My crappy superpower is solving difficult problems as I'm falling asleep.",
      "image": "http://localhost:3500/2022/write-down.jpg",
      "date_modified": "2022-02-16T17:55:50.000Z"
    },
    {
      "id": "http://localhost:3500/blog/2022/good-writers",
      "content_html": "\nHave you noticed that some people write extremely well? Take Aaron Swartz' article [\"Believe you can change\"](http://www.aaronsw.com/weblog/dweck):\n\n> Carol Dweck was obsessed with failure.\n\nWhat an _amazing_ first sentence. I'm immediately glued to this article. Who is Carol Dweck? What's wrong with her?\n\nIf I were writing that, I'd start with the immediately boring:\n\n> Carol Dweck is a Professor of Psychology at Stanford, studying the behavior of children and how they deal with failure.\n\nBecause I have a lot of practice writing in this dull manner that meets school requirements. But I'm already bored reading it.\n\nI'm learning to recognize good writing, and I'm fascinated. We all use the same set of words, but some writers are so much better at using them.\n",
      "url": "http://localhost:3500/blog/2022/good-writers",
      "title": "Good Writers",
      "summary": "Did you notice that some people write extremely well?",
      "image": "http://localhost:3500/2022/aaron-swartz.jpg",
      "date_modified": "2022-02-15T20:32:11.131Z"
    },
    {
      "id": "http://localhost:3500/blog/2018/coding-phase-begins",
      "content_html": "\n## What is unit testing ?\n\nUnit testing involves breaking your program into pieces and subjecting each\npiece into a series of tests.\n\nUsually, tests are run as separate programs, but the method of testing varies,\ndepending on the language and type of software (GUI, command-line, library).\nTests are usually run periodically, often after every change to the source\ncode. For details check out the unit testing article in\n[Wikipedia](https://en.wikipedia.org/wiki/Unit_testing).\n\nMost languages have [unit testing\nframeworks](http://en.wikipedia.org/wiki/List_of_unit_testing_frameworks).\n[`pytest`](http://pytest.org/) and\n[`unittest`](https://docs.python.org/2/library/unittest.html) are two\ntesting frameworks used by [coala](https://coala.io).\n\n## [`pytest`](http://pytest.org/) or [`unittest`](https://docs.python.org/3/library/unittest.html) for coala testing API ?\n\ncoala uses [`unittest`](https://docs.python.org/3/library/unittest.html)\nfor testing API but `pytest` has better features which are also discussed in\nthe issue [coala/coala#3676](https://github.com/coala/coala/issues/3676) and\nover gitter channel.\n\nFor example, `pytest` fixtures:\n\nAlthough unittest does allow us to have setup and teardown, pytest extends\nthis quite a bit. We can add specific code to run:\n\n- at the beginning and end of a module of test code\n  (setup_module/teardown_module)\n- at the beginning and end of a class of test methods\n  (setup_class/teardown_class)\n- alternate style of the class level fixtures (setup/teardown)\n- before and after a test function call (setup_function/teardown_function)\n- before and after a test method call (setup_method/teardown_method)\n\nFinally, all agreed on using `pytest` for the testing API. Thanks to\n[@NiklasMM](https://github.com/NiklasMM).\n\n## BaseTestHelper, A Base Class for All Bears' Tests\n\nAfter everyone's agreement on pytest, we moved on with the pytest for creating\nthe base class of bear's tests. [PR #5496](https://github.com/coala/coala/pull/5496).\n\nNow, all BearTestHelpers class will inherit from `BaseTestHelper` class.\nLike,\n\n```py\nclass BaseTestHelper:\n    pass\n\nclass LocalBearTestHelper(BaseTestHelper):\n    pass\n\nclass GlobalBearTestHelper(BaseTestHelper):\n    pass\n```\n\nGo through the [cEP-0027](https://github.com/coala/cEPs/blob/master/cEP-0027.md) for more information.\n\n## LocalBearTestHelper, A Test Helper Class for All Local Bears\n\ncoala testing API has a test helper class for simplification of testing of\nlocal bears which supports following methods:\n\n- `check_validity(...)` and `check_invalidity(...)`\n\n  `check_validity` or `check_invalidity(...)` asserts if your bear yields\n  any results for a particular check with a list of strings.\n\n- `check_results(...)`\n\n  `check_results` asserts if your bear results match the actual results on\n  execution on the command line interface.\n\n- `verify_local_bears(...)`\n\n  `verify_local_bear` asserts that a check of the given lines with the given\n  local bear either yields or does not yield any results.\n\n## GlobalBearTestHelper, A Test Helper Class for All Global Bears\n\ncoala's testing API does not support global bear test helper till date. This\nproject will add support for that. Work is going on with full pace. For the\nstatus, do check [PR #5522](https://github.com/coala/coala/pull/5522).\n\n## What lies ahead ?\n\nWe are working on testing API by coding, testing and debugging, failing and\nsucceeding. Till now, the burndown chart looks like:\n![GSoC 2018 Burndown-Phase I](/images/blog/burdown-phase1.png)\n\nI’m working on the GlobalBearTestHelper testing API and I’m likely to complete\nit by this week.\n\nThanks for stopping by ! Happy coding ! :blush:\n",
      "url": "http://localhost:3500/blog/2018/coding-phase-begins",
      "title": "GSoC'18 Post#2: `pytest` over `unittest`",
      "summary": "Coding phase of Google Summer of Code 2018 begins.",
      "image": "http://localhost:3500/coala.png",
      "date_modified": "2018-06-13T20:27:20.000Z"
    },
    {
      "id": "http://localhost:3500/blog/2018/community-bonding",
      "content_html": "\nTo know about [coala](https://coala.io), go through the\n[gsoc-with-coala](/blog/2018/gsoc-with-coala/) post.\n\n## Project abstract\n\nThe aim of the project is to improve linter bears in coala by improving the\ntesting API that adds support for global bears, adding base test helper class,\nautomating the tests for bears, adding support for 7 additional linter bears\nand enhancing the documentation for coala API and coala-bears.\n\n### Project Mentors:\n\n- [Niklas Meinzer](https://github.com/NiklasMM)\n- [Ipshita Chatterjee](https://github.com/IpshitaC)\n- [Abdeali Kothari](https://github.com/AbdealiJK)\n- [Max Hahn](https://github.com/Mixih)\n\n## What are Linter Bears ?\n\n[`Linter Bears`](http://api.coala.io/en/latest/Developers/Writing_Linter_Bears.html)\nword is a combination of the two terminologies: Linter and Bears.\n[Linter](<https://en.wikipedia.org/wiki/Lint_(software)>) is a tool that analyses\nsource code to flag programming errors, bugs, stylistic errors, and suspicious\nconstructs. Bears in coala is meant to do some analysis on source code. It can\ncheck your code for potential problems, calculate metrics and even provide\ncorrections for your code.\n\n[Linter Bears](http://api.coala.io/en/latest/Developers/Writing_Linter_Bears.html)\nare bears that are capable of wrapping third party open source linters, and to\nbe sustainable even allows you to write custom code analysis routines, thus\nextending the modular functionality of coala. You don't have to go through the\nhassle of learning how to use various tools for different programming\nlanguages. With over 45 supported languages(and counting), things get much\nsimpler under a single roof.\n\n## Community Bonding Period\n\nThe Milestones of my Project during Community Bonding Period are:\n\n- Get in touch with the mentors via [Google Hangouts](https://hangouts.google.com/)\n  and [Gitter room](https://gitter.im).\n- Make a [coala Enhancement Proposal(cEP)](https://github.com/coala/cEPs/pull/149)\n  of coala's Bears Testing API and get it merged.\n- Get assigned to all the issues of the project and finalise tasks to be\n  implemented in Coding Phase-I.\n\n## Conclusion\n\nOn 14<sup>th</sup> May, the community bonding has come to an end and I've\nnearly managed to complete my milestone. My earlier contributions to coala\nhelped me to get knowledge about the [`linter` class](http://api.coala.io/en/latest/coalib.bearlib.abstractions.html#module-coalib.bearlib.abstractions.Linter)\nof coala. It has been a wonderful time so far. I've managed to get\n[cEP-0027](https://github.com/coala/cEPs/blob/master/cEP-0027.md) merged.\n\nThats all for community bonding !\nStay tuned ! Till then, Happy Coding !\n",
      "url": "http://localhost:3500/blog/2018/community-bonding",
      "title": "GSoC'18 Post#1: Community bonding ends",
      "summary": "Community bonding of Google Summer of Code 2018.",
      "image": "http://localhost:3500/coala.png",
      "date_modified": "2018-06-06T19:27:20.000Z"
    },
    {
      "id": "http://localhost:3500/blog/2018/gsoc-with-coala",
      "content_html": "\n## What’s GSoC ?\n\nGSoC is an annual program administered and funded by Google for students all\naround the world to contribute to open source software in summer. You may\nthink that only undergrads are allowed to take part in this program, but\nthat’s not the case. Undergrads, students in graduate programs, PhD candidates\ncan take part in GSoC. As computer science or software engineering students\nGSoC one of the most prestigious things that students can accomplish.\n\n## Why open source ?\n\nOpen source software is the heart and soul of many organizations. It would be\nreal hard to imagine more secure and reliable software without open source\ninitiatives. Everyday hundreds and thousands of developers contribute to\ndifferent open source software. Just to get an idea about how OSS contributes\nfor entire software development industry, here’s a look at the statistics on\ndifferent project on GitHub in 2017.\n\n> To celebrate your contributions and a spectacular year together, let’s look\n> back at the projects, people, and teams of 2017.\n>\n> > [https://octoverse.github.com](https://octoverse.github.com)\n\n---\n\n## GSoC 2018\n\n![GSoC 2018 Project](/images/blog/GSoCPage.png)\n\n> via GSoC 2018 projects page\n\nGSoC is based on a model of different organizations providing projects for\nstudents all around the world. Each organization assign mentors for every\nproject and students are paired with mentors once they get selected.\n\nI’m happy that I have been selected to work with [coala](https://coala.io) for\n[GSoC 2018](https://summerofcode.withgoogle.com/).\n\n![Sangam](/images/blog/selection.png)\n\n## About coala\n\n[coala](https://coala.io) is a free and open-source language independent code\nanalysis tool, written in Python. The primary goal of coala is to make it\neasier for developers to create [rules and standards](https://docs.coala.io/en/latest/Users/coafile.html)\nto be followed in the source code.\n\ncoala provides a unified command-line interface for linting and fixing all\nyour code, regardless of the programming languages you use. coala allows you\nto simply check your code against certain quality requirements. The checking\nroutines are named Bears in coala. You can easily define a simple project file\nto check your project with all bears either shipped with coala or ones you\nfound in the internet and trust.\n\nYou can use coala from within your favorite editor, integrate it with your CI,\nget the results as JSON, or customize it to your needs with its flexible\nconfiguration syntax.\n\n## What more ?\n\nThis is my first blog post about GSoC, many more will follow. Here I will post\nabout the progress of my project along with some random posts about life or\nsome tech tutorial. There are two reasons why I have started this blog. First\nI have been selected in GSoC and the program require writing blog. Secondly,\nI follow lots of blogs on various topics on Quora/Medium etc regularly so I\nalways thought about writing a blog but never started one. So after my\nselection in GSoC, I started blogging with this one.\n\nIt is going to be a challenging task for sure. Hoping to have lots of fun and\nlooking forward to learning many new things this summer with coala and plan to\nuse this blog to post updates and developments. Feel free to contact me for\nany queries/questions regarding GSoC and I’ll be more than happy to answer\nthem.\n\nThats all folks ! Stay tuned.\n",
      "url": "http://localhost:3500/blog/2018/gsoc-with-coala",
      "title": "GSoC 2018 with coala",
      "summary": "Introduction of Google Summer of Code.",
      "image": "http://localhost:3500/gsoc-logo.png",
      "date_modified": "2018-04-30T19:27:20.000Z"
    },
    {
      "id": "http://localhost:3500/blog/2018/postkwoc",
      "content_html": "\n## End-term Report, KWoC\n\n### [Introduction](#intro)\n\nKharagpur Winter of Code is a 5-week long online programme for the students\nof various colleges, who are new to open source software development. The\nprogramme helps students to get involved in open source and prepares them\nfor many open source summer programmes like Google Summer of Code.\n\nHi, Myself [Sangam Kumar](https://www.sangam.dev). My GitHub ID is\n[sangamcse](https://github.com/sangamcse). I came to know about the programme\nin an Open Source Workshop during Abhiyantran, NIT Sikkim 2017. I registered\nfor it on 20th Nov 2017 and started choosing a project. My semester exam ended\non 22nd Nov 2017 so I was free to start coding.\n\n### Choosing a Project\n\nAfter registration, next step was to find a suitable project from the\n[listed projects](http://kwoc.kossiitkgp.in/projects).\n\nI found [Coala](https://github.com/coala/) very interesting for me. It provides\na unified interface for linting and fixing code with a single configuration\nfile, regardless of the programming languages used. I joined the gitter\ncommunication channel of coala and read the newcomer guidelines. My mentor for\nthis project is [Yash Nisar](https://github.com/yash-nisar). I contacted him\npersonally via [Facebook](https://www.facebook.com/yash.nisar/). He guided me\nto take all the steps to start. I started contributing after all the steps\ndone.\n\n### Commiting on Github\n\n#### _[My First PR](#firstpr)_\n\nTo start contribution on Coala, there were some rules to follow. It was all\ngiven in the newcomer guidelines. Next step was to find a\n[difficulty/newcomer issue](https://github.com/coala/coala-bears/issues?q=is%3Aopen+is%3Aissue+label%3Adifficulty%2Fnewcomer).\nI chose an [issue](https://github.com/coala/coala-bears/issues/2004) which was\nopened by my mentor. The issue was very easy for me. I solved the issue and\nsent [the PR](https://github.com/coala/coala-bears/pull/2148). But let me tell\nyou that getting merged the PR was not so easy.\n\n![First changes for the issue](/images/blog/1.png)\n\nChanges required in the issue was not this much. So\n[Yash Nisar](https://github.com/yash-nisar 'Yash Nisar') told me to make some\nmore changes in another file. So my final change looks like this.\n\n![Second changes for the issue](/images/blog/2.png)\n\nAnd there was some more issue in the PR. There was a failing test case on\ncircleCI but it was something related to an inability to fetch some dependency.\nThe gitmate-bot was checking the commit and my commit was not proper, so\n[Yash Nisar](https://github.com/yash-nisar 'Yash Nisar') helped me in that.\n\n![Suggestion by mentor](/images/blog/3.png)\n\nI made some changes in my commit which now look like below.\n\n![Changes in commit as suggested](/images/blog/4.png)\n\nAnd it passed all test cases for my first PR. It was ready to merge but\nmaintainer was taking some time to merge it. So the mentor suggested to\nrebase my branch.\n\n![Suggestion by mentor](/images/blog/5.png)\n\nOn 24th Dec, finally, my first PR got merged into the master branch of\ncoala/coala-bear.\n\n![Merged PR](/images/blog/6.png)\n\n#### _[My Second PR](#secondpr)_\n\nBefore choosing my second issue, I reviewed 2/3 difficulty/newcomer PRs. I was\ncontinuous active on gitter channel of coala. Then I searched for a\n[difficulty/low issue](https://github.com/coala/coala-bears/issues?q=is%3Aopen+is%3Aissue+label%3Adifficulty%2Flow).\n\nHowever, I chose a needs-design [issue](https://github.com/coala/landing-frontend/issues/250).\nThis issue requires changes in the [coala.io/#/languages](https://coala.io/#/languages)\npage where in place of programming language's name, there should be programming\nlanguage's logo.\n\nI have sent a [PR](https://github.com/coala/coalaCSS/pull/29) which is some\nchanges in CSS.\n\n![Changes in Second PR](/images/blog/7.png)\n\nThis PR still needs approval. I am working on a script to fetch the logo\nfrom wikidata and add that logo to the issue. [@jayvdb](https://github.com/jayvdb),\nwho is one of the owners of coala, is helping me in that script. That script\nneeds [pywikidata API](https://pywikidata.readthedocs.io/en/latest/chapter2.html#fetching-items).\n\n### Post KWoC\n\n- KWoC is ending now but since it’s an open source project, I could contribute to\n  it anytime. I’ve planned to fix the issues on coala issue's list.\n\n- I've planned to contribute to some other open-source, too.\n\nFinally, I would like to thanks my mentor [Yash Nisar](https://github.com/yash-nisar)\nfor helping me. I hope he will be there when I need his mentorship.\nA Lot more to learn from you. Thanks again!🙂 Also, thank you\n[Kharagpur Open Source Society(KOSS)](https://kossiitkgp.in/) and the people\nat KOSS for organizing Kharagpur Winter of Code and making sure that every\nstudent who is new to the open source get benefited.\n\n**[Sangam Kumar](https://github.com/sangamcse)**\n",
      "url": "http://localhost:3500/blog/2018/postkwoc",
      "title": "KWoC-Kharagpur Winter of Code",
      "summary": "End-term report of KWoC 2017.",
      "image": "http://localhost:3500/kwoc_logo.png",
      "date_modified": "2018-01-04T12:34:20.000Z"
    }
  ]
}
